{"version":3,"file":"customFunction.js","sourceRoot":"","sources":["../../src/utils/customFunction.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AAExB,yCAA0C;AAQ1C,+CAA8C;AAE9C,MAAM,WAAW,GAAG,IAAA,yBAAa,GAAE,CAAC;AAEvB,QAAA,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,6BAA6B,CAAC,CAAC;AAS1F,SAAgB,wBAAwB,CAAC,wBAAgC;IACvE,OAAO,KAAK,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE;QAC7C,MAAM,mBAAmB,GAA2C;YAClE,GAAG;YACH,MAAM,EAAE,MAAM,CAAC,WAAW,CACxB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACrE;YACD,OAAO,EAAE,MAAM,CAAC,WAAW,CACzB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CACxE;YACD,GAAG,EAAE,GAAG,CAAC,SAAS,EAAE;SACrB,CAAC;QACF,MAAM,IAAA,qBAAU,EACd,MAAM,EACN;YACE,cAAI,CAAC,IAAI,CAAC,oBAAY,EAAE,uBAAuB,CAAC;YAChD,wBAAwB;YACxB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC;SACpC,EACD;YACE,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,GAAG,EAAE,GAAG,CAAC,gBAAgB;YACzB,GAAG;SACJ,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AA1BD,4DA0BC","sourcesContent":["import path from 'path';\n\nimport { createContext } from 'this-file';\n\nimport { BuildStepFunction } from '../BuildStep.js';\nimport { BuildStepEnv } from '../BuildStepEnv.js';\nimport { SerializedBuildStepInput } from '../BuildStepInput.js';\nimport { SerializedBuildStepOutput } from '../BuildStepOutput.js';\nimport { SerializedBuildStepContext } from '../BuildStepContext.js';\n\nimport { spawnAsync } from './shell/spawn.js';\n\nconst thisFileCtx = createContext();\n\nexport const SCRIPTS_PATH = path.join(thisFileCtx.dirname, '../../dist_commonjs/scripts');\n\nexport interface SerializedCustomBuildFunctionArguments {\n  env: BuildStepEnv;\n  inputs: Record<string, SerializedBuildStepInput>;\n  outputs: Record<string, SerializedBuildStepOutput>;\n  ctx: SerializedBuildStepContext;\n}\n\nexport function createCustomFunctionCall(customFunctionModulePath: string): BuildStepFunction {\n  return async (ctx, { env, inputs, outputs }) => {\n    const serializedArguments: SerializedCustomBuildFunctionArguments = {\n      env,\n      inputs: Object.fromEntries(\n        Object.entries(inputs).map(([id, input]) => [id, input.serialize()])\n      ),\n      outputs: Object.fromEntries(\n        Object.entries(outputs).map(([id, output]) => [id, output.serialize()])\n      ),\n      ctx: ctx.serialize(),\n    };\n    await spawnAsync(\n      'node',\n      [\n        path.join(SCRIPTS_PATH, 'runCustomFunction.cjs'),\n        customFunctionModulePath,\n        JSON.stringify(serializedArguments),\n      ],\n      {\n        logger: ctx.logger,\n        cwd: ctx.workingDirectory,\n        env,\n      }\n    );\n  };\n}\n"]}