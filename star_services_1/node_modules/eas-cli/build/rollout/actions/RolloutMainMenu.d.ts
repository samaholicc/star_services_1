import { EASUpdateAction, EASUpdateContext } from '../../eas-update/utils';
import { UpdateChannelBasicInfoFragment } from '../../graphql/generated';
import { NonInteractiveOptions as CreateRolloutNonInteractiveOptions } from './CreateRollout';
import { NonInteractiveOptions as EditRolloutNonInteractiveOptions } from './EditRollout';
import { NonInteractiveOptions as EndRolloutNonInteractiveOptions } from './EndRollout';
import { ManageRolloutActions } from './ManageRollout';
export declare enum MainMenuActions {
    CREATE_NEW = "Create a new rollout",
    MANAGE_EXISTING = "Manage an existing rollout"
}
export type RolloutActions = MainMenuActions.CREATE_NEW | ManageRolloutActions.EDIT | ManageRolloutActions.END;
/**
 * Manage a rollout for the project.
 */
export declare class RolloutMainMenu implements EASUpdateAction<void> {
    private options;
    constructor(options?: {
        channelName?: string;
        action?: RolloutActions;
    } & Partial<EditRolloutNonInteractiveOptions> & Partial<EndRolloutNonInteractiveOptions> & Partial<CreateRolloutNonInteractiveOptions>);
    runAsync(ctx: EASUpdateContext): Promise<void>;
    runActionAsync(ctx: EASUpdateContext, menuAction: MainMenuActions): Promise<null>;
    selectRolloutAsync(ctx: EASUpdateContext): Promise<UpdateChannelBasicInfoFragment | null>;
    selectChannelAsync(ctx: EASUpdateContext, filterPredicate?: (channelInfo: UpdateChannelBasicInfoFragment) => boolean): Promise<UpdateChannelBasicInfoFragment>;
    resolveChannelNameAsync(ctx: EASUpdateContext, channelName: string): Promise<UpdateChannelBasicInfoFragment>;
    toMainMenuAction(action: RolloutActions): MainMenuActions;
    promptMenuActionAsync(): Promise<MainMenuActions>;
}
