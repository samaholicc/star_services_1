"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonInteractiveRollout = void 0;
const ChannelQuery_1 = require("../../graphql/queries/ChannelQuery");
const CreateRollout_1 = require("./CreateRollout");
const EditRollout_1 = require("./EditRollout");
const EndRollout_1 = require("./EndRollout");
const ManageRollout_1 = require("./ManageRollout");
const RolloutMainMenu_1 = require("./RolloutMainMenu");
/**
 * Control a rollout in non interactive mode.
 */
class NonInteractiveRollout {
    constructor(options = {}) {
        this.options = options;
    }
    async runAsync(ctx) {
        const { channelName, action } = this.options;
        const { nonInteractive, app, graphqlClient } = ctx;
        if (!nonInteractive) {
            throw new Error(`This action is meant for non-interactive mode.`);
        }
        if (!channelName) {
            throw new Error(`The channel argument is required in non-interactive mode. Run eas channel:rollout [channel-name]`);
        }
        const channelInfo = await ChannelQuery_1.ChannelQuery.viewUpdateChannelAsync(graphqlClient, {
            appId: app.projectId,
            channelName,
        });
        if (!action) {
            throw new Error(`--action is required in non-interactive mode.`);
        }
        await this.runActionAsync(ctx, action, channelInfo, this.options);
    }
    async runActionAsync(ctx, action, channelInfo, options) {
        switch (action) {
            case RolloutMainMenu_1.MainMenuActions.CREATE_NEW:
                return await new CreateRollout_1.CreateRollout(channelInfo, options).runAsync(ctx);
            case ManageRollout_1.ManageRolloutActions.EDIT:
                return await new EditRollout_1.EditRollout(channelInfo, options).runAsync(ctx);
            case ManageRollout_1.ManageRolloutActions.END:
                return await new EndRollout_1.EndRollout(channelInfo, options).runAsync(ctx);
        }
    }
}
exports.NonInteractiveRollout = NonInteractiveRollout;
